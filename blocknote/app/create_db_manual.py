import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def create_tables_manually():
    """
    Funci√≥n para crear las tablas manualmente usando SQL directo
    
    Esta funci√≥n se conecta directamente a la base de datos CockroachDB
    y ejecuta comandos SQL para crear la tabla 'notes'
    """
    
    # PASO 1: Establecer conexi√≥n con la base de datos
    # Aqu√≠ defines los par√°metros de conexi√≥n a tu base de datos
    conn = psycopg2.connect(
        host='localhost',        # Direcci√≥n del servidor (local en este caso)
        port='26257',           # Puerto de CockroachDB (por defecto es 26257)
        user='admin',           # Usuario de la base de datos
        password='Bruno56962953', # Contrase√±a del usuario
        database='DyD_notes_db', # Nombre de la base de datos
        sslmode='disable'       # Configuraci√≥n SSL (deshabilitada para desarrollo local)
    )
    
    # PASO 2: Configurar el cursor para ejecutar comandos SQL
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)  # Hace que los cambios se guarden autom√°ticamente
    cursor = conn.cursor()  # Cursor para ejecutar comandos SQL
    
    try:
        # PASO 3: Definir el SQL para crear la tabla
        # Este es el comando SQL que crea la estructura de tu tabla
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS notes (
            -- COLUMNA ID: Clave primaria que se autoincrementa
            -- SERIAL significa que CockroachDB asignar√° autom√°ticamente n√∫meros √∫nicos (1, 2, 3...)
            id SERIAL PRIMARY KEY,
            
            -- COLUMNA TITLE: Para almacenar el t√≠tulo de la nota
            -- STRING es texto variable, NOT NULL significa que es obligatorio
            title STRING NOT NULL,
            
            -- COLUMNA CONTENT: Para almacenar el contenido de la nota
            -- Tambi√©n es obligatorio (NOT NULL)
            content STRING NOT NULL,
            
            -- COLUMNA CREATED_AT: Fecha y hora de creaci√≥n
            -- DEFAULT NOW() significa que se pondr√° autom√°ticamente la fecha actual
            created_at TIMESTAMP DEFAULT NOW(),
            
            -- COLUMNA UPDATED_AT: Fecha y hora de √∫ltima actualizaci√≥n
            -- Esta columna puede estar vac√≠a (sin NOT NULL) hasta que se actualice la nota
            updated_at TIMESTAMP
        );
        """
        
        # PASO 4: Ejecutar el comando SQL para crear la tabla
        print("üîß Creando tabla 'notes' en la base de datos...")
        cursor.execute(create_table_sql)  # Aqu√≠ se ejecuta el SQL
        print("‚úÖ Tabla 'notes' creada exitosamente!")
        
        # PASO 5: Verificar que la tabla se cre√≥ correctamente
        # Hacemos una consulta simple para confirmar que funciona
        cursor.execute("SELECT COUNT(*) FROM notes;")
        result = cursor.fetchone()  # Obtener el resultado
        print(f"‚úÖ Verificaci√≥n: La tabla est√° funcionando correctamente. Registros actuales: {result[0]}")
        
        # PASO 6: Mostrar informaci√≥n adicional sobre la tabla
        print("\nüìä Informaci√≥n de la tabla creada:")
        print("- Nombre: notes")
        print("- Columnas: id, title, content, created_at, updated_at")
        print("- Tipo de base de datos: CockroachDB")
        
        print("\nüéâ ¬°Base de datos configurada exitosamente!")
        print("üí° Ahora puedes usar tu API para crear, leer, actualizar y eliminar notas.")
        
    except Exception as e:
        print(f"‚ùå Error al crear las tablas: {e}")
        print("üí° Verifica que:")
        print("   - CockroachDB est√© ejecut√°ndose")
        print("   - Los datos de conexi√≥n sean correctos")
        print("   - Tengas permisos para crear tablas")
    finally:
        # PASO 7: Cerrar conexiones (importante para liberar recursos)
        cursor.close()  # Cerrar el cursor
        conn.close()    # Cerrar la conexi√≥n
        print("üîå Conexi√≥n a la base de datos cerrada.")

if __name__ == "__main__":
    create_tables_manually()